# GenieUs Cloud Build Configuration
# フロントエンド・バックエンドの並行ビルド&デプロイ

steps:
  # Step 1: 環境変数とプロジェクト設定
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'setup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔧 Cloud Build環境設定..."
        gcloud config set project $_GCP_PROJECT_ID
        echo "Project: $_GCP_PROJECT_ID"
        echo "Environment: $_ENVIRONMENT"
        echo "Region: $_GCP_REGION"

  # Step 2: 必要なAPIを有効化
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔌 必要なGCP APIを有効化中..."
        gcloud services enable run.googleapis.com
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable containerregistry.googleapis.com
        gcloud services enable artifactregistry.googleapis.com
        gcloud services enable aiplatform.googleapis.com
        echo "✅ API有効化完了"

  # Step 3: IAMサービスアカウント設定
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'setup-iam'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "👤 IAMサービスアカウント設定..."
        
        # サービスアカウント作成（既存の場合はスキップ）
        if ! gcloud iam service-accounts describe genius-backend-sa@$_GCP_PROJECT_ID.iam.gserviceaccount.com &>/dev/null; then
          echo "Creating service account..."
          gcloud iam service-accounts create genius-backend-sa \
            --display-name="Genius Backend Service Account" \
            --description="Service account for Genius backend Cloud Run service"
        else
          echo "Service account already exists"
        fi
        
        # 必要な権限付与
        for role in "roles/aiplatform.user" "roles/storage.objectAdmin" "roles/logging.logWriter" "roles/monitoring.metricWriter"; do
          echo "Granting role: $$role"
          gcloud projects add-iam-policy-binding $_GCP_PROJECT_ID \
            --member="serviceAccount:genius-backend-sa@$_GCP_PROJECT_ID.iam.gserviceaccount.com" \
            --role="$$role" \
            --quiet || true
        done
        
        echo "✅ IAM設定完了"

  # Step 4: バックエンドビルド・デプロイ（並行処理）
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🐍 バックエンドをCloud Buildでデプロイ中..."
        
        cd backend
        
        # サービス名決定とデプロイ
        if [ "$_ENVIRONMENT" = "production" ]; then
          echo "Service: genius-backend"
          gcloud run deploy "genius-backend" \
            --source . \
            --platform managed \
            --region $_GCP_REGION \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 2Gi \
            --min-instances 1 \
            --max-instances 5 \
            --service-account genius-backend-sa@$_GCP_PROJECT_ID.iam.gserviceaccount.com \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=$_GCP_PROJECT_ID" \
            --set-env-vars "ENVIRONMENT=$_ENVIRONMENT" \
            --set-env-vars "GOOGLE_GENAI_USE_VERTEXAI=True" \
            --set-env-vars "GOOGLE_CLOUD_LOCATION=us-central1" \
            --set-env-vars "ROUTING_STRATEGY=$_ROUTING_STRATEGY" \
            --set-env-vars "LOG_LEVEL=$_LOG_LEVEL" \
            --timeout 300 \
            --quiet
          
          # バックエンドURL取得
          gcloud run services describe "genius-backend" \
            --platform managed \
            --region $_GCP_REGION \
            --format 'value(status.url)' > /workspace/backend_url.txt
        else
          echo "Service: genius-backend-$_ENVIRONMENT"
          gcloud run deploy "genius-backend-$_ENVIRONMENT" \
            --source . \
            --platform managed \
            --region $_GCP_REGION \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 2Gi \
            --min-instances 0 \
            --max-instances 3 \
            --service-account genius-backend-sa@$_GCP_PROJECT_ID.iam.gserviceaccount.com \
            --add-volume name=data-volume,type=cloud-storage,bucket=genius-$_ENVIRONMENT-data \
            --add-volume-mount volume=data-volume,mount-path=/app/data \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=$_GCP_PROJECT_ID" \
            --set-env-vars "ENVIRONMENT=$_ENVIRONMENT" \
            --set-env-vars "GOOGLE_GENAI_USE_VERTEXAI=True" \
            --set-env-vars "GOOGLE_CLOUD_LOCATION=us-central1" \
            --set-env-vars "ROUTING_STRATEGY=$_ROUTING_STRATEGY" \
            --set-env-vars "LOG_LEVEL=$_LOG_LEVEL" \
            --timeout 300 \
            --quiet
          
          # バックエンドURL取得（デプロイ完了後に再取得）
          sleep 10  # デプロイ完了を待機
          gcloud run services describe "genius-backend-$_ENVIRONMENT" \
            --platform managed \
            --region $_GCP_REGION \
            --format 'value(status.url)' > /workspace/backend_url.txt
        fi
        
        echo "✅ バックエンドデプロイ完了: $$(cat /workspace/backend_url.txt)"

  # Step 5: フロントエンドビルド・デプロイ（並行処理）
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "⚛️ フロントエンドをCloud Buildでデプロイ中..."
        
        cd frontend
        
        # バックエンドURLを取得（依存関係のため待機）
        while [ ! -f /workspace/backend_url.txt ]; do
          echo "Waiting for backend URL..."
          sleep 5
        done
        # サービス名決定とデプロイ
        echo "Backend URL: $$(cat /workspace/backend_url.txt)"
        
        if [ "$_ENVIRONMENT" = "production" ]; then
          echo "Service: genius-frontend"
          if gcloud run deploy "genius-frontend" \
            --source . \
            --platform managed \
            --region $_GCP_REGION \
            --allow-unauthenticated \
            --port 3000 \
            --cpu 1 \
            --memory 1Gi \
            --min-instances 1 \
            --max-instances 10 \
            --set-env-vars "NODE_ENV=production" \
            --set-env-vars "NEXT_PUBLIC_API_BASE_URL=$$(cat /workspace/backend_url.txt)" \
            --set-env-vars "NEXTAUTH_SECRET=$_NEXTAUTH_SECRET" \
            --set-env-vars "GOOGLE_CLIENT_ID=$_GOOGLE_CLIENT_ID" \
            --set-env-vars "GOOGLE_CLIENT_SECRET=$_GOOGLE_CLIENT_SECRET" \
            --timeout 300 \
            --quiet; then
            
            # フロントエンドURL取得
            sleep 10  # デプロイ完了を待機
            gcloud run services describe "genius-frontend" \
              --platform managed \
              --region $_GCP_REGION \
              --format 'value(status.url)' > /workspace/frontend_url.txt
          else
            echo "❌ フロントエンドデプロイ失敗 - 既存サービスのURLを取得"
            gcloud run services describe "genius-frontend" \
              --platform managed \
              --region $_GCP_REGION \
              --format 'value(status.url)' > /workspace/frontend_url.txt || echo "https://frontend-deploy-failed" > /workspace/frontend_url.txt
          fi
        else
          echo "Service: genius-frontend-$_ENVIRONMENT"
          if gcloud run deploy "genius-frontend-$_ENVIRONMENT" \
            --source . \
            --platform managed \
            --region $_GCP_REGION \
            --allow-unauthenticated \
            --port 3000 \
            --cpu 1 \
            --memory 1Gi \
            --min-instances 0 \
            --max-instances 5 \
            --set-env-vars "NODE_ENV=production" \
            --set-env-vars "NEXT_PUBLIC_API_BASE_URL=$$(cat /workspace/backend_url.txt)" \
            --set-env-vars "NEXTAUTH_SECRET=$_NEXTAUTH_SECRET" \
            --set-env-vars "GOOGLE_CLIENT_ID=$_GOOGLE_CLIENT_ID" \
            --set-env-vars "GOOGLE_CLIENT_SECRET=$_GOOGLE_CLIENT_SECRET" \
            --timeout 300 \
            --quiet; then
            
            # フロントエンドURL取得（デプロイ完了後に再取得）
            sleep 10  # デプロイ完了を待機
            gcloud run services describe "genius-frontend-$_ENVIRONMENT" \
              --platform managed \
              --region $_GCP_REGION \
              --format 'value(status.url)' > /workspace/frontend_url.txt
          else
            echo "❌ フロントエンドデプロイ失敗 - 既存サービスのURLを取得"
            gcloud run services describe "genius-frontend-$_ENVIRONMENT" \
              --platform managed \
              --region $_GCP_REGION \
              --format 'value(status.url)' > /workspace/frontend_url.txt || echo "https://frontend-deploy-failed" > /workspace/frontend_url.txt
          fi
        fi
        
        echo "✅ フロントエンドデプロイ完了: $$(cat /workspace/frontend_url.txt)"
    waitFor: ['deploy-backend']

  # Step 5.5: バックエンドのCORS設定更新
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'update-backend-cors'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔧 バックエンドのCORS設定を更新中..."
        
        FRONTEND_URL=$$(cat /workspace/frontend_url.txt)
        echo "Frontend URL for CORS: $$FRONTEND_URL"
        
        if [ "$_ENVIRONMENT" = "production" ]; then
          SERVICE_NAME="genius-backend"
        else
          SERVICE_NAME="genius-backend-$_ENVIRONMENT"
        fi
        
        echo "Updating CORS settings for: $$SERVICE_NAME"
        
        # バックエンドサービスにCORS環境変数を追加
        gcloud run services update "$$SERVICE_NAME" \
          --region="$_GCP_REGION" \
          --update-env-vars "CORS_ORIGINS=$$FRONTEND_URL" \
          --update-env-vars "NEXTAUTH_URL=$$FRONTEND_URL" \
          --quiet
          
        echo "✅ バックエンドCORS設定完了"
    waitFor: ['deploy-frontend']

  # Step 6: 古いリビジョンクリーンアップ
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'cleanup-revisions'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🧹 古いリビジョンをクリーンアップ中..."
        
        # 各サービスの古いリビジョンを削除（最新3つを保持）
        for service in "genius-backend-$_ENVIRONMENT" "genius-frontend-$_ENVIRONMENT"; do
          echo "Cleaning up service: $$service"
          
          # 最新3つ以外のリビジョンを取得して削除
          OLD_REVISIONS=$$(gcloud run revisions list \
            --service="$$service" \
            --region="$_GCP_REGION" \
            --format="value(metadata.name)" \
            --sort-by="~metadata.creationTimestamp" \
            --limit=1000 | tail -n +4)
          
          if [ -n "$$OLD_REVISIONS" ]; then
            echo "Deleting old revisions for $$service:"
            echo "$$OLD_REVISIONS" | while read revision; do
              echo "  - $$revision"
              gcloud run revisions delete "$$revision" \
                --region="$_GCP_REGION" \
                --quiet || echo "Failed to delete $$revision"
            done
          else
            echo "No old revisions to delete for $$service"
          fi
        done
        
        echo "✅ リビジョンクリーンアップ完了"
    waitFor: ['update-backend-cors']

  # Step 7: ヘルスチェック・動作確認
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🏥 ヘルスチェック実行中..."
        
        echo "Backend URL: $$(cat /workspace/backend_url.txt)"
        echo "Frontend URL: $$(cat /workspace/frontend_url.txt)"
        
        # バックエンドヘルスチェック
        echo "Checking backend health..."
        if curl -f "$$(cat /workspace/backend_url.txt)/health" -m 30; then
          echo "✅ Backend health check OK"
        else
          echo "⚠️ Backend health check failed"
        fi
        
        # フロントエンドヘルスチェック
        echo "Checking frontend..."
        if curl -f "$$(cat /workspace/frontend_url.txt)" -m 30; then
          echo "✅ Frontend health check OK"
        else
          echo "⚠️ Frontend health check failed"
        fi
        
        echo ""
        echo "🎉 デプロイ完了サマリー"
        echo "=========================="
        echo "Environment: $_ENVIRONMENT"
        echo "Project: $_GCP_PROJECT_ID"
        echo "Region: $_GCP_REGION"
        echo ""
        
        # フロントエンドの状態確認
        FRONTEND_URL=$$(cat /workspace/frontend_url.txt)
        if [ "$$FRONTEND_URL" = "https://frontend-deploy-failed" ]; then
          echo "⚠️  Frontend: デプロイ失敗（既存サービス継続）"
        else
          echo "✅ Frontend URL: $$FRONTEND_URL"
        fi
        
        echo "✅ Backend URL: $$(cat /workspace/backend_url.txt)"
        echo "✅ API Docs: $$(cat /workspace/backend_url.txt)/docs"
        echo "=========================="
    waitFor: ['cleanup-revisions']

# 置換変数（デフォルト値）
substitutions:
  _GCP_PROJECT_ID: 'your-project-id'
  _ENVIRONMENT: 'staging'
  _GCP_REGION: 'asia-northeast1'
  _ROUTING_STRATEGY: 'enhanced'
  _LOG_LEVEL: 'INFO'
  _NEXTAUTH_SECRET: 'default-nextauth-secret'
  _GOOGLE_CLIENT_ID: ''
  _GOOGLE_CLIENT_SECRET: ''

# ビルド設定
timeout: 1200s
options:
  # ログ設定
  logging: CLOUD_LOGGING_ONLY
  
  # マシンタイプ（並行処理のためハイスペック）
  machineType: 'E2_HIGHCPU_8'
  
  # 環境変数
  env:
    - 'CLOUDSDK_COMPUTE_REGION=$_GCP_REGION'
    - 'CLOUDSDK_RUN_REGION=$_GCP_REGION'

# 成果物（ログ保存）
artifacts:
  objects:
    location: 'gs://$_GCP_PROJECT_ID-build-artifacts'
    paths: 
      - '/workspace/*.txt'