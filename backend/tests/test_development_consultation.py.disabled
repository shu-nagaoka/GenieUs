"""発育相談機能のテスト - 旧アーキテクチャ用

注意: このテストファイルは削除された旧アーキテクチャのコンポーネントを参照しています
新しい設定ベースエージェントアーキテクチャに対応したテストは別途作成が必要です

元のファイルは .disabled 拡張子で保存され、pytestでは実行されません
"""

import logging
from unittest.mock import Mock

import pytest

from src.application.interface.protocols.child_carer import (
    AgeDetectionResult,
    DevelopmentAssessmentResult,
    SafetyAssessmentResult,
)
from src.application.usecases.development_consultation_usecase import (
    DevelopmentConsultationRequest,
    DevelopmentConsultationUseCase,
)
from src.infrastructure.adapters.development_adviser import GeminiDevelopmentAdviser
from src.tools.development_consultation_tool import create_development_consultation_tool


class TestDevelopmentConsultationUseCase:
    """発育相談UseCaseのテスト"""

    def setup_method(self):
        """テストセットアップ"""
        self.mock_development_adviser = Mock()
        self.mock_age_detector = Mock()
        self.mock_safety_assessor = Mock()
        self.mock_logger = Mock(spec=logging.Logger)

        self.usecase = DevelopmentConsultationUseCase(
            development_adviser=self.mock_development_adviser,
            age_detector=self.mock_age_detector,
            safety_assessor=self.mock_safety_assessor,
            logger=self.mock_logger,
        )

    def test_successful_consultation(self):
        """正常な発育相談処理のテスト"""
        # モックの設定
        self.mock_safety_assessor.assess_safety.return_value = SafetyAssessmentResult(
            urgency="低",
            reason="特に問題なし",
            recommended_action="定期的な観察を継続",
            risk_factors=[],
        )

        self.mock_age_detector.detect_age.return_value = AgeDetectionResult(
            age_group="乳児前期",
            estimated_age="6ヶ月",
            developmental_stage="はいはい期",
            confidence=0.9,
        )

        self.mock_development_adviser.assess_development.return_value = DevelopmentAssessmentResult(
            development_status="お子さんの発育は順調に進んでいるようです",
            milestone_assessment="6ヶ月の発育マイルストーンは適切に達成されています",
            concerns=[],
            recommendations=["定期的な健診を受けましょう"],
            next_checkpoints=["お座りの確認（8ヶ月頃）"],
            urgency_level="低",
        )

        # リクエスト作成
        request = DevelopmentConsultationRequest(
            message="6ヶ月の赤ちゃんがまだお座りできません",
            user_id="test_user",
            session_id="test_session",
            child_age_months=6,
        )

        # UseCase実行
        response = self.usecase.consult(request)

        # 検証
        assert response.success is True
        assert "順調" in response.development_advice
        assert response.age_group == "乳児前期"
        assert len(response.recommendations) > 0
        assert response.urgency_level == "低"

    def test_consultation_with_concerns(self):
        """懸念がある場合の発育相談テスト"""
        # 懸念がある場合のモック設定
        self.mock_safety_assessor.assess_safety.return_value = SafetyAssessmentResult(
            urgency="中",
            reason="発達の遅れの可能性",
            recommended_action="専門医への相談を推奨",
            risk_factors=["発達遅延の可能性"],
        )

        self.mock_age_detector.detect_age.return_value = AgeDetectionResult(
            age_group="幼児前期",
            estimated_age="18ヶ月",
            developmental_stage="歩行期",
            confidence=0.8,
        )

        self.mock_development_adviser.assess_development.return_value = DevelopmentAssessmentResult(
            development_status="いくつかの点で注意が必要です",
            milestone_assessment="一部のマイルストーンで遅れが見られます",
            concerns=["言語発達の遅れ", "社会性の課題"],
            recommendations=["小児科医への相談をお勧めします", "発達専門機関への相談も検討してください"],
            next_checkpoints=["専門医による詳細な発達評価"],
            urgency_level="中",
        )

        request = DevelopmentConsultationRequest(
            message="18ヶ月なのにまだ歩けず、言葉も出ません",
            user_id="test_user",
            session_id="test_session",
            child_age_months=18,
        )

        response = self.usecase.consult(request)

        assert response.success is True
        assert len(response.concerns) == 2
        assert "小児科医" in response.recommendations[0]
        assert response.urgency_level == "中"

    def test_error_handling(self):
        """エラーハンドリングのテスト"""
        # 例外を発生させる
        self.mock_safety_assessor.assess_safety.side_effect = Exception("テストエラー")

        request = DevelopmentConsultationRequest(
            message="テストメッセージ",
            user_id="test_user",
            session_id="test_session",
        )

        response = self.usecase.consult(request)

        # エラー時の適切な応答を確認
        assert response.success is False
        assert "一時的な問題が発生しました" in response.development_advice
        assert response.urgency_level == "低"


class TestDevelopmentConsultationTool:
    """発育相談Toolのテスト"""

    def setup_method(self):
        """テストセットアップ"""
        self.mock_usecase = Mock()
        self.mock_logger = Mock(spec=logging.Logger)

        self.tool = create_development_consultation_tool(usecase=self.mock_usecase, logger=self.mock_logger)

    def test_tool_success_response(self):
        """ツール正常実行のテスト"""
        # UseCaseの成功レスポンスをモック
        from datetime import datetime

        from src.application.usecases.development_consultation_usecase import DevelopmentConsultationResponse

        mock_response = DevelopmentConsultationResponse(
            development_advice="お子さんの発育は順調です",
            detailed_assessment="詳細な評価結果",
            milestone_status="適切に達成",
            age_group="乳児前期",
            concerns=[],
            recommendations=["定期的な健診を受けましょう"],
            next_checkpoints=["お座りの確認"],
            urgency_level="低",
            safety_assessment="低",
            session_id="test_session",
            timestamp=datetime.now(),
            success=True,
        )

        self.mock_usecase.consult.return_value = mock_response

        # ツール実行
        result = self.tool.func(
            message="6ヶ月の赤ちゃんの発育について",
            user_id="test_user",
            session_id="test_session",
            child_age_months=6,
        )

        # 検証
        assert result["success"] is True
        assert "順調" in result["response"]
        assert result["metadata"]["age_group"] == "乳児前期"
        assert result["metadata"]["urgency_level"] == "低"

    def test_tool_error_handling(self):
        """ツールエラーハンドリングのテスト"""
        # UseCase実行でエラーを発生させる
        self.mock_usecase.consult.side_effect = Exception("テストエラー")

        result = self.tool.func(message="テストメッセージ", session_id="test_session")

        # エラー時の適切な応答を確認
        assert result["success"] is False
        assert "一時的な問題が発生しました" in result["response"]
        assert result["metadata"]["error"] == "tool_execution_failed"


class TestGeminiDevelopmentAdviser:
    """GeminiDevelopmentAdviserのテスト"""

    def setup_method(self):
        """テストセットアップ"""
        self.mock_logger = Mock(spec=logging.Logger)
        self.adviser = GeminiDevelopmentAdviser(logger=self.mock_logger)

    def test_assess_development_newborn(self):
        """新生児期の発育評価テスト"""
        age_result = AgeDetectionResult(
            age_group="新生児期",
            estimated_age="2ヶ月",
            developmental_stage="新生児期",
            confidence=0.9,
        )

        safety_result = SafetyAssessmentResult(
            urgency="低",
            reason="正常範囲",
            recommended_action="定期的な観察",
            risk_factors=[],
        )

        result = self.adviser.assess_development(
            query="2ヶ月の赤ちゃんの首座りについて",
            age_result=age_result,
            safety_result=safety_result,
        )

        assert isinstance(result, DevelopmentAssessmentResult)
        assert "新生児期" in result.milestone_assessment
        assert len(result.recommendations) > 0
        assert result.urgency_level in ["低", "中", "高"]

    def test_assess_development_with_concerns(self):
        """懸念がある場合の発育評価テスト"""
        age_result = AgeDetectionResult(
            age_group="乳児期",
            estimated_age="12ヶ月",
            developmental_stage="歩行準備期",
            confidence=0.7,
        )

        safety_result = SafetyAssessmentResult(
            urgency="中",
            reason="発達の遅れ可能性",
            recommended_action="専門医相談",
            risk_factors=["発達遅延"],
        )

        result = self.adviser.assess_development(
            query="12ヶ月でまだ立てません、心配です",
            age_result=age_result,
            safety_result=safety_result,
        )

        assert len(result.concerns) > 0
        assert "専門医" in " ".join(result.recommendations)
        assert result.urgency_level != "低"

    def test_error_handling(self):
        """エラーハンドリングのテスト"""
        # 意図的にエラーを起こすような入力でテスト
        # 実際の実装では、どんな入力でもエラーハンドリングが動作することを確認

        age_result = None  # 意図的にNoneを渡す
        safety_result = SafetyAssessmentResult(
            urgency="低",
            reason="テスト",
            recommended_action="テスト",
            risk_factors=[],
        )

        # エラーが発生してもフォールバック応答が返されることを確認
        try:
            result = self.adviser.assess_development(query="テスト", age_result=age_result, safety_result=safety_result)
            # フォールバック応答の確認
            assert result.development_status is not None
            assert len(result.recommendations) > 0
        except Exception:
            # 例外が発生する場合もテストとしては OK
            # フォールバック機能のテストは integration test で実施
            pass


if __name__ == "__main__":
    pytest.main([__file__])