# Combined Frontend + Backend Dockerfile for Cloud Run
FROM node:20-alpine AS frontend-builder

# フロントエンドビルド
WORKDIR /app/frontend
COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci --only=production
COPY frontend/ ./
RUN npm run build

# バックエンドビルド用
FROM python:3.12.8-slim AS backend-builder

# uvのインストール
RUN pip install uv

WORKDIR /app/backend
COPY backend/pyproject.toml backend/uv.lock* ./
RUN uv sync --frozen --no-dev

# 最終実行ステージ
FROM python:3.12.8-slim AS runner

# 必要パッケージのインストール
RUN apt-get update && apt-get install -y \
    curl \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# ユーザー作成
RUN useradd --create-home --shell /bin/bash genius

# Python環境の設定
WORKDIR /app
COPY --from=backend-builder /app/backend/.venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# バックエンドコードのコピー
COPY --chown=genius:genius backend/src/ ./backend/src/

# フロントエンドビルド結果のコピー
COPY --from=frontend-builder /app/frontend/.next/standalone ./frontend/
COPY --from=frontend-builder /app/frontend/.next/static ./frontend/.next/static
COPY --from=frontend-builder /app/frontend/public ./frontend/public

# Nginxリバースプロキシ設定
COPY <<EOF /etc/nginx/sites-available/default
server {
    listen 8080;
    server_name _;

    # フロントエンド (Next.js)
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # バックエンドAPI (FastAPI)
    location /api/ {
        proxy_pass http://localhost:8000/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # ヘルスチェック
    location /health {
        proxy_pass http://localhost:8000/health;
    }
}
EOF

# Supervisor設定（複数プロセス管理）
COPY <<EOF /etc/supervisor/conf.d/genieus.conf
[supervisord]
nodaemon=true
user=root

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/nginx.err.log
stdout_logfile=/var/log/nginx.out.log

[program:backend]
command=/app/.venv/bin/uvicorn backend.src.main:app --host 127.0.0.1 --port 8000
directory=/app
autostart=true
autorestart=true
user=genius
stderr_logfile=/var/log/backend.err.log
stdout_logfile=/var/log/backend.out.log

[program:frontend]
command=node frontend/server.js
directory=/app
autostart=true
autorestart=true
user=genius
environment=PORT=3000,HOSTNAME=127.0.0.1
stderr_logfile=/var/log/frontend.err.log
stdout_logfile=/var/log/frontend.out.log
EOF

# ポート公開
EXPOSE 8080

# 環境変数
ENV PORT=8080
ENV PYTHONPATH=/app

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# 起動コマンド
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]